<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xmlns:context="http://www.springframework.org/schema/context"
			xmlns:mvc="http://www.springframework.org/schema/mvc"
			xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<context:component-scan base-package="com.springmvc"></context:component-scan>

<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="resourceResolver">
<property name="prefix" value="/WEB-INF/pages/"></property>
<property name="suffix" value=".jsp"></property>
<!-- <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
 --></bean>
 <bean class="com.springmvc.view.MeiNVViewResolver">
 <property name="order" value="1"></property>
 </bean>

<!--让springmvc管理国际化资源文件，配置一个资源文件管理器 ,id必须名为messageSource -->
<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
<!-- basename指定文件基础名 -->
<property name="basename" value="i18n"></property>
</bean>
<!-- <list>
<value>i18n</value>
<value>errors</value>
</list>
</property> -->
<!-- <property name="cacheSeconds" value="0"></property>
<property name="defaultEncoding" value="UTF-8"></property> -->


<!-- path：指定去哪个请求    view-name:指定映射哪个视图-->
<!--把它配上，可以访问动态资源   -->
<!-- <mvc:view-controller path="/hello/loginTest" view-name="login"/>
 -->
<!--默认前端拦截器是拦截所有资源（除过jsp,js文件就404了，要js文件的请求是交给Tomcat处理的）
，下面配置告诉springmvc，自己映射的请求就自己处理，不能处理的请求直接交给Tomcat -->
<!-- 把它配上，可以访问静态资源，所以上下两个配置是springmvc标配-->
<mvc:default-servlet-handler/>
<!-- conversion-service="conversionService"使用我们自己配置的类型转换组件 -->
<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>

<!-- 配置文件上传解析器，id必须是 multipartResolver(观察源码可以知道是通过getBean获取这个id得到解析器的)-->
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
<!-- #{1024*1024*20}springmvc可以使用表达式来表达20m大小 -->
<property name="maxUploadSize" value="#{1024*1024*20}"></property>
<property name="defaultEncoding" value="utf-8"></property>
</bean>

<!-- 自定义区域信息解析器 -->
<bean id="localeResolver" class="com.springmvc.component.MyLocaleResolver"></bean>
<!-- 配置拦截器 -->
<mvc:interceptors>
 <!-- 这种是一种统一配置，拦截所有的方法 -->
<bean class="com.springmvc.component.SingleInterceptor"></bean> 
<!-- 配置某个拦截器的更详细的信息 -->

<!-- 表示只拦截这一页面下的内容 -->
<mvc:interceptor>
<mvc:mapping path="/testHandlerInterceptor"/>
<bean class="com.springmvc.component.MultiInterceptor"></bean>
</mvc:interceptor>
</mvc:interceptors>

<!-- 告诉springmvc别用默认的ConversionService，而用我自定义的ConversionService，自定义的中可能有我们自定义的converter -->
<!-- 以后写自定义类型转换器的时候，就是用FormattingConversionServiceFactoryBean而不使用ConversionServiceFactoryBean，这样既具有类型转换还有格式化功能 -->
<bean class="org.springframework.format.support.FormattingConversionServiceFactoryBean" id="conversionService">
<!-- 在源码中converters是一个set类型 -->
<!--converters转换器中添加我们自定义的类型转换器 -->
<property name="converters">
<set>
<bean class="com.springmvc.component.MyStringToEmployee"></bean>
</set>
</property>
</bean>

</beans>